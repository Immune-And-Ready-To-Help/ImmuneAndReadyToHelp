@page
@model IndexModel
@{
    ViewData["Title"] = "Immune And Ready To Help";
    Layout = "_IndexLayout";
}

@section Head
{
    <environment include="Development">
        <script crossorigin src="https://unpkg.com/react@16/umd/react.development.js"></script>
        <script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
    </environment>
    <environment exclude="Development">
        <script crossorigin src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
        <script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>
    </environment>


    <script src="https://unpkg.com/@@babel/standalone/babel.min.js"></script>

    <style>
        #btn-update-location{
            width: 100%;
        }

        #search-location {
            width: 100%;
            font-size: 40px;
            margin-top: 13px;
        }

        .pad-right{
            padding-right: 20px;
        }
    </style>
}



<div class="page-header header-filter" data-parallax="true" style="background-image: url('/images/AntibodyBannerMini.jpg');">
    &nbsp;
</div>

<div class="button-bar">
    <button class="learn-more" onclick="window.location = '/Faq';">
        FAQ
    </button>
    <button class="learn-more" onclick="window.location = '/Opportunity';">
        Create An Opportunity!
    </button>
</div>

<div class="splash">
    <h2 style="margin: auto;">Have COVID-19 Antibodies?</h2>
    <h4 style="margin: auto;">There Is Urgent Need For YOUR Help!</h4>
</div>

<div class="main main-raised">
    <div class="profile-content">
        <form>
            <div class="container">
                <div class="row">
                    <h3 class="give-it-space">Nearby Opportunities</h3>
                    <div id="map" class="map"></div>
                </div>
                <div class="row">
                    <div class="col-md-9">
                        <input type="text" id="search-location" />
                    </div>
                    <div class="col-md-3">
                        <button type="submit" id="btn-update-location" class="learn-more" formaction='javascript:SetLocationByAddress($("#search-location").val());'>
                            Update Location
                        </button>
                    </div>
                </div>
                <div class="row">
                    <div id="opportunity-list-view">
                        @*React Binds The List View Here*@
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">&nbsp;</div>
                </div>
            </div>
        </form>
    </div>
</div>

<footer class="footer footer-default" style="margin-top: 10px;">
    <div class="container">
        <div class="copyright float-right">
            &copy;
            <script>
                document.write(new Date().getFullYear())
            </script>, Immune And Ready To Help
        </div>
    </div>
</footer>
<!--   Core JS Files   -->
<script src="/js/core/jquery.min.js" type="text/javascript"></script>
<script src="/js/core/popper.min.js" type="text/javascript"></script>
<script src="/js/core/bootstrap-material-design.min.js" type="text/javascript"></script>
<script src="/js/plugins/moment.min.js"></script>
<!--	Plugin for the Datepicker, full documentation here: https://github.com/Eonasdan/bootstrap-datetimepicker -->
<script src="/js/plugins/bootstrap-datetimepicker.js" type="text/javascript"></script>
<!--  Plugin for the Sliders, full documentation here: http://refreshless.com/nouislider/ -->
<script src="/js/plugins/nouislider.min.js" type="text/javascript"></script>
<!--  Google Maps Plugin    -->
<!-- Control Center for Material Kit: parallax effects, scripts for the example pages etc -->
<script src="/js/material-kit.js?v=2.0.7" type="text/javascript"></script>

<script type="text/babel">
    function BindOpportunities(opportunities) {
    const listItems = opportunities.map((opportunity) =>
    <div className="row listing" key="opportunityId.toString()">
        <div className="col-md-12">
            <div className="container">
                <div className="row">
                    <div className="col-xs-12 opportunity-item">
                        <div className="container">
                            <div className="row page-sub-head">
                                    <div class="col-xs-4 pad-right">
                                        <img src={opportunity.logoUrl} className="company-logo" />
                                    </div>
                                    <div class="col-xs-8">
                                        {opportunity.title.toString()}
                                    </div>
                                </div>
                                <div className="row">
                                    <div className="col-md-12">
                                        <br />{opportunity.description.toString()}
                                    </div>
                                </div>
                                <div className="row">
                                    <div className="col-md-12 learn-more">
                                        <a className="unstyled-link" href={'/Apply?OpportunityId=' + opportunity.opportunityId}>Learn More</a>
                                    </div>
                                </div>
                            </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    );

    ReactDOM.render(
    <div className="container opportunity">{listItems}</div>,
    document.getElementById('opportunity-list-view')
    );
    }
</script>
<script type="text/javascript">
    // Note: This example requires that you consent to location sharing when
    // prompted by your browser. If you see the error "The Geolocation service
    // failed.", it means you probably did not give permission for the browser to
    // locate you.
    var map, infoWindow;
    var markers = [];
    var callQueued = false;
    var locationInitialized = false;

    function clearMarkers() {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(null);
        }
    }

    // Deletes all markers in the array by removing references to them.
    function deleteMarkers() {
        clearMarkers();
        markers = [];
    }

    function SetLocationByAddress(address) {
        GetGeocoding(
            address,
            (geocoding) => {
                //update the text box that displays the search location
                $('#search-location').val(`${geocoding.city}, ${geocoding.state}`);

                var pos = {
                    lat: geocoding.coordinate.latitude,
                    lng: geocoding.coordinate.longitude
                };

                locationInitialized = true;
                map.setCenter(pos);
            }
        );
    }

    function GetGeocoding(address, success) {
        $.ajax({
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            'type': 'GET',
            'url': `/api/Geocoding/${encodeURIComponent(address)}`,
            'success': success
        });
    }

    function UpdateMapLocation(bounds) {
        deleteMarkers();

        var ne = bounds.getNorthEast();
        var sw = bounds.getSouthWest();

        var data = {
            "northEastCorner": {
                "latitude": ne.lat(),
                "longitude": ne.lng()
            },
            "southWestCorner": {
                "latitude": sw.lat(),
                "longitude": sw.lng()
            }
        };

        $.ajax({
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            'type': 'POST',
            'url': '/api/Opportunities/FindWithinRange',
            'data': JSON.stringify(data),
            'dataType': 'json',
            'success': (opportunities) => {
                BindOpportunities(opportunities);

                for (var i = 0; i < opportunities.length; i++) {
                    const opportunity = opportunities[i];
                    const marker = new google.maps.Marker({
                        position: {
                            lat: opportunity.locationOfOpportunity.latitude,
                            lng: opportunity.locationOfOpportunity.longitude
                        },
                        title: opportunity.title
                    });
                    marker.setMap(map);
                    //save reference to marker so we can delete it later
                    markers.push(marker);
                };
            }
        });
    }

    function initMap() {
        //defaults to Austin, TX
        let pos = { lat: 30.2672, lng: -97.7431 };

        map = new google.maps.Map(document.getElementById('map'), {
            center: pos,
            zoom: 9
        });
        infoWindow = new google.maps.InfoWindow;

        // Try HTML5 geolocation.
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
            }, function () {
                handleLocationError(true, infoWindow, map.getCenter());
            });
        } else {
            // Browser doesn't support Geolocation
            handleLocationError(false, infoWindow, map.getCenter());
        }

        SetLocationByAddress(`${pos.lat}, ${pos.lng}`);

        google.maps.event.addListener(map, 'bounds_changed', function () {
            const delaySeconds = .5;
            if (!callQueued && locationInitialized) {
                //prevent quick succession of calls and limit to one every delaySeconds interval
                callQueued = true;
                setTimeout(
                    () => {
                        callQueued = false;
                        const bounds = map.getBounds();
                        UpdateMapLocation(bounds);
                    }, delaySeconds * 1000);
            } 
        });
    }

    function handleLocationError(browserHasGeolocation, infoWindow, pos) {
        infoWindow.setPosition(pos);
        infoWindow.setContent(browserHasGeolocation ?
            'Error: The Geolocation service failed.' :
            'Error: Your browser doesn\'t support geolocation.');
        infoWindow.open(map);
    }
</script>
<script async defer
        src="@Href("https://maps.googleapis.com/maps/api/js?callback=initMap&key=" + Model.GoogleMapsApiKey)">
</script>